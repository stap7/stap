STAP (Simple Task-Actor Protocol)
version 7.02


    Message Type        Regular Expression                                  Functionality
    ** task -> user **  <<container>>                                       edit current display container with values in <<container>>
    ** task -> user **  null                                                clear the display container
    ** task -> user **  {<<taskOption>>(,<<taskOption>>)*}                  optional task directives
    ** user -> task **  [<<ums>>,("<<id>>")|<<itemNum>>,<<value>>]          user-side action (e.g. button-click, textbox edit); second field corresponds to the <<key>> of the item that is manipulated by user; <<id>> doesn't exist, <<item-num>> is sent; <<value>> must be of a type consistent with this item (e.g. for boolean items value must be a boolean)
    ** user -> task **  [<<ums>>,("<<id>>")|<<itemNum>>,<<userEvent>>]      user-side event (e.g. load/unload, captured key or mouse event); second field corresponds to the <<key>> of the item that is manipulated by user; <<id>> doesn't exist, <<item-num>> is sent

    Label Name          Regular Expression                                  Functionality
    <<container>>       [<<item>>(,<<item>>)*]                              array of items
    <<item>>            <<value>>|({<<key>>:<<value>>})                     an item may be specified by value, or via a key-value pair; if item is declared by value, it can still be edited via a key-value pair where the key corresponds to the item's order in its container -- <<item-num>>
    <<item>>            {<<key>>:null}                                      remove item from container; e.g., {"#0":null} will remove the first item from the display
    <<key>>             "#<<itemNum>>"                                      <<itemNum>> is the item number within the current container; item numbering in a container begins at 0, thus "#0" is the first item in a given container; if <<item-num>> is greater or equal to current number of items in the container, corresponding value is appended to this container
    <<key>>             "@<<id>>"                                           unique item key; <<id>> text is displayed as item title text (unless "title" optional property is specified, see below); e.g. [{"@Name":"Bob"},{"@Age":77}] adds two key:value pairs to the UI -- Name:Bob and Age:77, and [{"@Age":78}] would change the value for Age from 77 to 78
    <<value>>           <<text>>|<<number>>|<<boolean>>|<<container>>       item value may be text, number, boolean, or an array of items
    <<item-num>>        <<uint>>
    <<item-id>>         <<chars>>
    <<ums>>             <<uint>>                                            time in milliseconds since the initiation of user software (e.g. onload event)
    <<text>>            ** see JSON string specification, e.g. http://json.org **
    <<chars>>           ** see JSON chars specification, e.g. http://json.org **
    <<number>>          ** see JSON number specification, e.g. http://json.org **
    <<uint>>            ** integer >= 0 **
    <<boolean>>         (true)|(false)

everything above is core-STAP; all user-side sw must be able to handle the format specified above for simple text+button tasks

==

everything below specifies optional directives that enable more featureful user-interface interactions

    <<taskOption>>      "require":{<<required>>(,<<required>>)*}            should be sent once before task begins; specify which options and option values are required for correctly interpreting current task; if any of the <<required>> items are not implemented yet in the user software, the suggested behavior is to disconnect from task after a polite {"error":"sorry, <<required>> is not yet implemented on this side :("}
    <<taskOption>>      "template":<<url>>|<<js>>                           likely sent once before task begins; may be ignored by computational agents; url of a custom visualization template for STAP messages (e.g. CSS or JS file); may be used multiple times to load multiple template files
    <<taskOption>>      "replace":{<<text>>:<<html>>(,<<text>>:<<html>>)*}  likely sent once before task begins; may be ignored by computational agents; replace shorthand text with longer text/html (can be used for special characters, icons, sound, images, movies, etc.); used to save bandwidth/processing and make things nice looking in gui, rather than to add meaningful information (e.g. to replace certain words with icon equivalents); Example:  {"_replace":{":)":"<img src=smiley.gif>"}} would signify that whenever ":)" is found in text, it is to be replaced with the smiley.gif image
    <<taskOption>>      "task":{"(win)|(loss)|(end)":<<conds>>}             likely sent once before task begins; win, loss, and neutral task-end conditions; suggested user-sw behavior for human participants is to convert <<conds>> into natural language and display as "Instructions"
    <<taskOption>>      "task":{"(good)|(bad)":<<conds>>}                   likely sent once before task begins; goal values (what to seek, what to avoid); suggested user-sw behavior for human participants is to convert <<conds>> into natural language and display as "Instructions"
    <<taskOption>>      "client":[<<clientInfo>>(,<<clientInfo>>)*]         likely sent once before task begins; request information about user-side software; the polite thing for user-side software to do would be to reply to "client" <<taskOption>> with as much information as possible, but task-side code should not be dependent on this; participant replies to this request as such: [<<ums>>,0,{"clientinfo":<<json>>}]; e.g. a response to {"clientinfo":["ip","url","screen","userAgent"]} may be [<<ums>>,0,{"clientinfo":{"ip":"129.84.2.65","url":"http://localhost:8080/stap.html","screen":{"availWidth":1524,"availHeight":900,"width":1600,"height":900,"colorDepth":24,"pixelDepth":24,"availLeft":0,"availTop":0,"orientation":{"angle":0}},"userAgent":"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.106 Safari/537.36"}}]
    <<taskOption>>      "error":<<text>>                                    optional message to be dumped into user-side error stream
    <<conds>>           [<<cond>>|<<condAnd>>(,<<cond>>|<<condAnd>>)*]      <<conds>> list is True if any of the items in it are True
    <<condAnd>>         [<<cond>>(,<<cond>>)*]                              <<condAnd>> list is True if ALL of the items in it are True
    <<cond>>            [<<key>>(,"<|>|(<=)|(>=)|(!=)")?,<<number>>|<<text>>]
    <<clientInfo>>      "ip"                                                request client ip address
    <<clientInfo>>      "userAgent"                                         request information about user-side software (e.g. webbrowser type/version, AI architecture type/version)
    <<clientInfo>>      "url"                                               request client url (relevant when user-side software runs in a webbrowser)
    <<clientInfo>>      "screen"                                            find out total user screen size (for human participants this would be different from <<eventType>> 13, which only sends back current <<container>> size)
    <<userEvent>>       {"client":{(<<clientInfo>>:<<json>>,)+}}            response to "client" <<taskOption>>; e.g. a response to {"client":["ip","url","screen","userAgent"]} may be [<<ums>>,0,{"client":{"ip":"129.84.2.65","url":"http://localhost:8080/stap.html","screen":{"availWidth":1524,"availHeight":900,"width":1600,"height":900,"colorDepth":24,"pixelDepth":24,"availLeft":0,"availTop":0,"orientation":{"angle":0}},"userAgent":"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.106 Safari/537.36"}}]
    <<userEvent>>       {"error":<<text>>}                                  user->task messages that contain this directive are dumped into task-side error stream
    <<userEvent>>       [0]                                                 onload event to indicate that user-side sw is ready
    <<userEvent>>       [1]                                                 beforeunload event, i.e. user-sw is quitting
    <<json>>            ** see full JSON specification, e.g. http://json.org **
    <<url>>             ** legal url **
    <<js>>              ** legal javascript **
    <<html>>            ** legal text/html **


everything above is core-STAP; although task-options can be ignored in many cases, user-side sw must still expect them as potentially incoming messages, and be willing to quit if it cannot handle any of the items specified via the "require" task option

==

everything below can be negotiated via the "require" <<taskOption>>; if task requires options that user sw cannot handle, user can disconnect

- unless otherwise specified, each option value is inheritable; e.g. [{"@numbers":[1,2,{"@more":[3,4]}],"rnd":1}] signifies that all numeric values in "numbers", including those in the "more" container, are rounded to 1 (integers)
- [item-specific] options are not inheritable
- [edit-specific] option values are not permanent; e.g. [{"@x":"","T":10,"bg":"blue"}] signifies that the background of "x" should be changed to blue over the course of 10seconds, after which the value of "bg" (background) remains "blue", but the value "T" (time of animation) resets to null, because "T" is an [edit-specific] option

    Label Name          Regular Expression                                  Functionality
    <<required>>        "options":[<<optionName>>(,<<optionName>>)*]        specify options necessary for this task; e.g., {"required":{"options":["r","rot"]}}
    <<required>>        "sizeUnits":["<<sizeUnit>>"(,"<<sizeUnit>>")*]      specify size-units necessary for this task; e.g., {"required":{"sizeUnits":["%","E","vh","vw"]}}
    <<required>>        "emphases":<<emphasis>>                             specify emphasis types necessary for this task; e.g., {"required":{"emphases":33}} signifies that two emphases types are required, each with three levels of strength
    <<required>>        "types":[<<itemType>>(,<<itemType>>)+]              specify item types necessary for this task; e.g., {"required":{"types":["popup","path"]}}; if "requiredTypes" is not empty, "type" does not need to be specified via {"required":{"options"...} -- it is assumed to be required
    <<required>>        "events":[<<eventType>>(,<<eventType>>)*]           specify event-capture capabilities necessary for this task; e.g., {"required":{"events":["keydown","mousemove"]}};  if "requiredEvents" is not empty, "e" does not need to be specified via {"required":{"options"...} -- it is assumed to be required
    <<optionName>>      ** the part on the left of the colon in the <<option>> or <<taskOption>> expression; e.g. "ins", "S", "eB", "bg" **

    <<item>>            {(<<key>>:<<value>>)|<<option>>(,<<option>>)*}      item can be declared/edited via a property-list, which potentially includes the key-value pair, as well as other optional properties; if a value is not specified when declaring a new item, the default value is [] -- an empty container; e.g. [{"bg":"red"},{"bg":"blue"}] creates two containers, one with red background color, one with blue
    <<value>>           {}                                                  unspecified value; useful when options other than item value need to be changed; e.g. [{"@my box":{},"bg":"red"}] changes the background color of "my box" to red
    <<key>>             "@"                                                 unspecified key; useful when value and options need to be specified without a unique key; e.g. [{"@":"hello world","c":"red"}] adds red text "hello world" to the display
    <<key>>             "\*"                                                wild key; e.g. [{"*":{},"c":"blue"}] changes the color of every item to blue; [{"*":null,"W":2}] waits 2 seconds and then deletes everything
    <<taskOption>>      <<option>>                                          optional properties for top-level container
    <<taskOption>>      ".":{<<key>>:<<value>>(,<<option>>)*}               search for item by <<key>> in all of the containers, and change its value and options according to the specified <<value>> and <<option>>'s

    <<option>>          "ins":<<uint>>                                      [edit-specific] insert current item at, or move to, row indicated by <<uint>> (row-numbering starts at 0); if <<uint>> is greater or equal to current number of rows in parent container, corresponding item is appended to this container; e.g. ["a","b","c"] followed by [{"@":"x","ins":1}] is equivalent to ["a","x","b","c"]
    <<option>>          "S":<<ums>>|null                                    [edit-specific] start time flag (exclusive with "W" option); used to delay the processing of the current edits until user time has reached specified <<ums>>; null clears previous delays (initiated via "S" or "W" directive) for current item edits
    <<option>>          "W":<<number>>|null                                 [edit-specific] wait time flag (exclusive with "S" option); used to delay the processing of the current edits; <<number>> is the number of seconds to delay; null clears previous delays (initiated via "S" or "W" directive) for current item edits; e.g. [{"@text":"hello"},{"@text":null,"W":2}}] would add "text":"hello" to screen, and then remove it 2 seconds later
    <<option>>          "T":<<number>>|null                                 [edit-specific] animate (Tween) flag; <<number>> is the number of seconds to animate the current edits; null clears current animations
    <<option>>          "R":<<receiptType>>                                 [edit-specific] receipt flag for current edit
    <<option>>          "$":<<id>>                                          [edit-specific] optional unique <<id>> for current edit (rather than the item being edited); useful for edits that employ S, T, or R flags; e.g. the following four task->user messages -- [{"@candles":0}]  [{"@candles":1,"$":"t1","S":10000,"R":3}]  [{"@candles":2,"$":"t2","S":20000,"R":3}]  [{"$":"t1":,"S":null}] -- would result in a key:value pair "candles":0 being added to display, and timers set up to change the value of "candles" to 1 at 10sec, then to 2 at 20sec into the task, then the 10sec timer is removed, but the 20sec timer for the same item remains, and user sw ends up sending the following back to task -- [<<ums>>,"t1",{"R":1}] [<<ums>>,"t2",{"R":1}] [20000,"t2",{"R":2}]
    <<option>>          <<inputOption>>                                     user-input options (specify whether item value is editable, and what the behavior is upon edits)
    <<option>>          <<containerOption>>                                 container item options
    <<option>>          <<boolOption>>                                      boolean item options
    <<option>>          <<numOption>>                                       number item options
    <<option>>          <<txtOption>>                                       text item options
    <<option>>          <<boxOption>>                                       [item-specific] style options; these options should be used only when needed for the task to function correctly, never merely for visual appeal (visual appeal specifications are loaded via templates, using <<taskOption>> "template":<<url>>)
    <<option>>          <<aniOption>>                                       animation options

    <<option>>          "type":<<itemType>>                                 [item-specific] the value specified for this item 
    <<itemType>>        "popup"                                             this item is a popup -- a special <<container>> that pops up over other items of the parent container, partially obscuring their view, and preventing them from being edited
    <<itemType>>        "table"                                             this item is a table -- a special <<container>> that contains others <<container>> items, each of which will be a row in a table; e.g. [{"@personnel":[["name","age","gender"],["john",39,"m"],["mary",28,"f"]],"type":"table","head":1}] will add a "personnel" table with a header row and two records (john, mary)
    <<itemType>>        "pie"                                               this item is a pie -- a special <<container>> whose items are displayed as slices in a pie
    <<itemType>>        "path"                                              this item is a line/path -- its value is an array of numbers where each pair of numbers to signify line points, or <<text>> to signify SVG path string; e.g. [{"@my graph":[150,0,75,200,225,200],"type":"path","w":300,"h":300}] or [{"@my graph":"M150 0 75 200 225 200 Z","type":"path","w":300,"h":300}] would each draw the same triangle in a 300x300 container
    <<option>>          <<tableOption>>                                     table item options
    <<option>>          <<pieOption>>                                       pie item options
    <<option>>          <<pathOption>>                                      path item options; these options should be used only when needed for the task to function correctly, never merely for visual appeal (visual appeal specifications are loaded via templates, using <<taskOption>> "template":<<url>>)

    <<inputOption>>     "patronym":<<uint>>                                 <<uint>> indicates the number of patronyms (i.e. parent container names) to include in ** user -> task ** messages; e.g. [{"@personnel":[["name","age","gender"],["john",39,"m",false],["mary",28,"f",false]],"type":"table","head":1,"patronym":1}] will create a "personnel" table with a header and two records, each record having an unnamed button -- when the button corresponding to "john" row is clicked, user->task message will be [<<ums>>,[3,1],true], where [3,1] correspond to the button id and button's parent id (i.e. cell and row numbers), respectively; when the button corresponding to "mary" row is clicked, user->task message will be [<<ums>>,[3,2],true]; if the "patronym" option for this table was set to 2, clicking the buttons corresponding to "john" and "mary" rows would send [<<ums>>,[3,1,"personnel"],true] and  [<<ums>>,[3,2,"personnel"],true] user->task messages, respectively
    <<inputOption>>     "onedit":<<item>>                                   how to change editable item after user changes its value; use "onedit":{} to reset a control to do nothing after a user-directed change; e.g. [{"@say something:":"","eT":1,"onedit":""}] will create a textbox where user can type something, but as soon as they hit Enter, the text will disappear; [{"@btn1":false,"onedit":{"eB":0}}] creates a button, btn1, that becomes disabled once clicked; [{"@btn1":false,"onedit":null}] creates a button, btn1, that gets removed once clicked
    <<inputOption>>     "onsubedit":<<item>>                                how to change container after one of its child items receives user input; e.g. [{"@choose":[{"@choice 1":false},{"@choice 2":false},{"@choice 3":false}],"select":1,"onsubedit":{"eB:0"}}] creates a set of three choices, which all become disabled once any one of them gets clicked
    <<inputOption>>     "eB":0|1                                            editable Boolean flag; 0 makes boolean items (buttons) disabled; 1 (default) enables them
    <<inputOption>>     "eT":0|1|2|3|4                                      editable Text flag; 0 (default) is standard, non-editable text; non-zero value turns text items into text inputs; 1 signifies that text-change event occurs on enter-key; 2 sends change when field loses focus; 3 sends change on both enter-key and blur; 4 sends change whenever any text in the field is altered
    <<inputOption>>     "eN":0|1|2|3|4                                      editable Number flag; 0 (default) is standard, non-editable text; non-zero value turns text items into text inputs; 1 signifies that text-change event occurs on enter-key; 2 sends change when field loses focus; 3 sends change on both enter-key and blur; 4 sends change whenever any text in the field is altered
    <<inputOption>>     "e":[<<eventType>>(,<<eventType>>)*]                [item-specific] event capture; capture item events like key presses and mouse movements; event types required for task must be pre-specified via the "require" <<taskOption>>
    <<inputOption>>     "esu":"<<sizeUnit>>"                                size unit for x/y/w/h specs in user->task messages for captured events

    <<boolOption>>      "select":-1|0|1|2                                   selection behavior for boolean items: -1 (default) means that each item is selected (true) on click, and considered deselected immediately (i.e. clickable buttons); 0 means that each item is selected (true) on mousedown, and deselected (false) on mouseup (i.e. hold-down buttons); 1 means that an item stays selected (true) when clicked, until it is clicked again to deselect (false), or until another item is selected within the current container (i.e. radio buttons or select); 2 means that each item is selected (true) when clicked and deselected (false) when clicked again (i.e. checkboxes or multiple-select)
    <<boolOption>>      "select":"n"                                        selection behavior for boolean items: "n" is a hybrid between 1 and 0 -- only one item in container can be selected at a time, but the selection/deselection does not happen on click, but rather on mousedown/hover/mouseup  (e.g. a set of navigation buttons) -- each item is selected (true) either on mousedown or on mousehover while another boolean item in this container is selected, and an item is deselected (false) either on mouseup or when mouse hovers over some other boolean item in this container

    <<numOption>>       "rnd":<<number>>                                    round to the nearest <<number>>; e.g. [{"@x":57.1,"rnd":.01}] should be interpreted as x=57.10, [{"@x":57.1,"rnd":5}] should be interpreted as x=55
    <<numOption>>       "<=":<<number>>                                     minimum value
    <<numOption>>       ">=":<<number>>                                     maximum value
    <<numOption>>       "unit":<<text>>                                     exclusive with "time" option; unit for the number (e.g. "$", "%", "m/sec", "kg", "€ million", "$ k")
    <<numOption>>       "time":"(<<timeField>>)+"                           exclusive with "unit" option; indicates that the value for this item is the total number of seconds since 1970/01/01 00:00; e.g. [{"@when":1483963200,"time":"YMDhm"}] is a way to specify date/time 2017/01/09 12:00

    <<txtOption>>       "pwd":<<text>>                                      this turns a text input into a password field, and <<text>> specifies salt to append to the password string before using SHA256 to hash it before sending (this way user's intended passwords are never sent across the wire (this does not preclude the need to also salt/hash server-side); salt must be consistent for a given user; see https://en.wikipedia.org/wiki/Salt_(cryptography))
    <<txtOption>>       "no":<<text>>                                       <<text>> is a set of characters that are not allowed to be entered into the text item; e.g. "no":"\r\n"
    <<txtOption>>       "maxchars":<<number>>                               max number of characters in <<text>> or <<number>> item

    <<boxOption>>       "title":<<text>>                                    visible title (replaces item id as the visible title)
    <<boxOption>>       "emp":<<emphasis>>                                  emphasize
    <<boxOption>>       "bg":<<cssBackground>>                              background
    <<boxOption>>       "c":<<color>>                                       text/stroke color
    <<boxOption>>       "fnt":<<cssFont>>                                   text font
    <<boxOption>>       "scroll":0|1|2                                      vertical scrolling; 0 - scrolling isn't allowed, 1 - scrolling allowed when possible, 2 - scrolling isn't allowed, but container automatically scrolls to the bottom to reveal newly added content, 3 - scrolling is allowed, and container automatically scrolls to the bottom to reveal newly added content
    <<boxOption>>       "scrollH":0|1|2                                     horizontal scrolling; 0 - scrolling isn't allowed, 1 - scrolling allowed when possible, 2 - scrolling isn't allowed, but container automatically scrolls to the right to reveal newly added content, 3 - scrolling is allowed, and container automatically scrolls to the right to reveal newly added content
    <<boxOption>>       "w":<<number>>|"<<number>><<sizeUnit>>"             width of the item
    <<boxOption>>       "h":<<number>>|"<<number>><<sizeUnit>>"             height of the item
    <<boxOption>>       "x":<<number>>|"<<number>><<sizeUnit>>"             horizontal position of left-top corner of the item
    <<boxOption>>       "y":<<number>>|"<<number>><<sizeUnit>>"             vertical position of left-top corner of the item
    <<boxOption>>       "z":<<number>>                                      z-index (stack order) of the item; an item with greater stack order is always in front of an item with a lower stack order
    <<boxOption>>       "r":<<number>>                                      rounded corner radius (ex: create a circle w/ radius=10 -> {"_bx":{"w":20,"h":20,"r":10}})
    <<boxOption>>       "rot":<<number>>                                    rotation
    <<boxOption>>       "bd":<<cssBorder>>                                  border style
    <<boxOption>>       "bdc":<<color>>                                     border color
    <<boxOption>>       "bdw":<<number>>                                    border width
    <<boxOption>>       "pad":<<cssPadding>>                                padding

    <<aniOption>>       "ease":(0|1|2|3|4|"back"|"elastic"|"bounce")        easing option for animation; default is 0 (linear); see http://greensock.com/ease-visualizer to visualize ease options
    <<aniOption>>       "easeout":(1|-1|0)                                  ease direction; 1 is out, -1 is in, 0 is in-and-out; default is 1; see http://greensock.com/ease-visualizer to visualize ease options

    <<tableOption>>     "head":0|1                                          if this value is 1, first row of a table is treated as the header row (default value is 0)

    <<pieOption>>       "bounda":[<<number>>(,<<number>>)*]                 bounding angles of the pie in clockwise order; e.g., [{"@navigation":[{"@E":false},{"@S":false},{"@W":false},{"@N":false}],"type":"pie","bounda":[45,135,225,315]}]

    <<pathOption>>      "f":(<<color>>|"none")                              similar to SVG fill
    <<pathOption>>      "thk":<<number>>                                    similar to SVG stroke-width
    <<pathOption>>      "arrow1|2":"(arrow)|(circle)|(square)|()"           similar to SVG marker-start/marker-end
    <<pathOption>>      "cap":"(square)|(round)|()"                         similar to SVG stroke-linecap
    <<pathOption>>      "dash":<<strokeDash>>                               similar to SVG stroke-dasharray

    <<userEvent>>       {"R":<<receiptType>>}                               response to "R" <<option>>; receipt message for edits corresponding to key of item being edited (or key of specific edit whenever "$" is specified)
    <<userEvent>>       [<<eventType>>(,<<value>>)*]                        captured UI events specified via the "e" option, see <<eventType>> descriptions below for more detail

    <<emphasis>>        1                                                   emphasize current container/content in some way
    <<emphasis>>        10                                                  emphasize current container/content in some way, different from {"emp":1}
    <<emphasis>>        100                                                 emphasize current container/content in some way, different from {"emp":1} or {"emp":10}
    <<emphasis>>        2                                                   emphasize current container/content in the same way as {"emp":1}, but stronger (e.g. if {"emp":1} makes text bold, {"emp":2} makes text bolder, etc)
    <<emphasis>>        <<uint>>                                            emphasize current container/content in some way; each <<uint>> is a positive integer where the value of the singles digit declares the intensity of emphasis A, the value of the tens digit declares the intensity of a different emphasis B, the value of the hundreds digit declares the intensity of yet a different emphasis C, and so on; e.g. if {"emp":1} is bold, {"emp":10} can be a bg highlight, {"emp":100} can be increased font size, etc.; if {"emp":1} is bold, {"emp":2 is bolder}, and {"emp":3} is even bolder (or bold+italic); if {"emp":10} is a beige highlight, {"emp":20} is a brighter highlight (e.g. orange), and {"emp":30} is even brighter (e.g. yellow); adding numbers yields a combined emphasis
    <<sizeUnit>>        ** legal CSS length unit; e.g., http://www.w3schools.com/cssref/css_units.asp **
    <<sizeUnit>>        E                                                   E signifies item size; when specifying height of <<container>> or <<table>>, E is row-height (e.g. {"h":"2.5E"} signifies that 2.5 rows will be visible in current container before scrolling down); when specifying width of <<container>> or <<table>>, E is item-width (e.g. {"w":"2.5E"} signifies that 2.5 items will be visible in current container before scrolling right); when specifying height of a <<text>> item, E is (font height + space between lines) (e.g. {"h":"2.5E"} signifies that 2.5 lines of text will be visible in current item before scrolling down); when specifying width of a <<text>> item, E is (font width + space between characters) (e.g. {"w":"10E"} signifies that, if font-type is monospace, 10 characters will be visible; if font is not monospace, at least client promises to do its best).
    <<sizeUnit>>        w|h                                                 specify size as a proportion of current width or height; e.g., [{"@my box":{},"w":100,"h":".5w"}] makes the width/height of "my box" 100 and 50 pixels, respectively
    <<receiptType>>     1..7                                                1 indicates a receipt required when the message is received (receipt is sent as soon as the message is received, even if execution is delayed due to S flag); 2 indicates a receipt required when changes occur (if the change is animated, "R":2 indicates the beginning, not the end of animation); 4 indicates a receipt required at the end of the animation (if there is no animation, this is equivalent to "R":2); sums of these values indicate that multiple receipts are required (e.g. "R":3 is equivalent to having both, "R":1 and "R":2)
    <<eventType>>       0                                                   load event; user->task message on this event would be: [<<ums>>,<<key>>,[0]]
    <<eventType>>       1                                                   beforeunload event; user->task message on this event would be: [<<ums>>,<<key>>,[1]]
    <<eventType>>       10                                                  focus event; user->task message on this event would be: [<<ums>>,<<key>>,[10]]
    <<eventType>>       11                                                  blur event; user->task message on this event would be: [<<ums>>,<<key>>,[11]]
    <<eventType>>       12                                                  scroll event; user->task message on this event would be: [<<ums>>,<<key>>,[12,<<number>>]
    <<eventType>>       13                                                  resize event; user->task message on this event would be: [<<ums>>,<<key>>,[13,<<number>>,<<number>>]] where <<number>>,<<number>> is the width and height of the item; when this event is first assigned to an item, an immediate response is warranted
    <<eventType>>       14                                                  collision event; user->task message on this event would be: [<<ums>>,<<key>>,[14,<<key>>,<<number>>,<<number>>,<<number>>,<<number>>]] where <<key>> is the colliding item (which must also have collision-detection enabled), and <<number>>,<<number>>,<<number>>,<<number>> is the x,y,width,height of the overlapping rectangle, where x,y is from the top-left corner of current item
    <<eventType>>       20                                                  select event; user->task message on this event would be: [<<ums>>,<<key>>,[20,<<number>>,<<number>>]]
    <<eventType>>       21                                                  copy event; user->task message on this event would be: [<<ums>>,<<key>>,[21]]
    <<eventType>>       22                                                  cut event; user->task message on this event would be: [<<ums>>,<<key>>,[22]]
    <<eventType>>       23                                                  paste event; user->task message on this event would be: [<<ums>>,<<key>>,[23]]
    <<eventType>>       30                                                  keypress event; user->task message on this event would be: [<<ums>>,<<key>>,[30,<<number>>]], where <<number>> is the keycode
    <<eventType>>       31                                                  keydown event; user->task message on this event would be: [<<ums>>,<<key>>,[31,<<number>>]], where <<number>> is the keycode
    <<eventType>>       32                                                  keyup event; user->task message on this event would be: [<<ums>>,<<key>>,[32,<<number>>]], where <<number>> is the keycode
    <<eventType>>       40                                                  click event; user->task message on this event would be: [<<ums>>,<<key>>,[40,<<number>>,<<number>>]] where <<number>>,<<number>> is the x,y of the mouse from the top-left of item 
    <<eventType>>       41                                                  dblclick event; user->task message on this event would be: [<<ums>>,<<key>>,[41,<<number>>,<<number>>]] where <<number>>,<<number>> is the x,y of the mouse from the top-left of item 
    <<eventType>>       42                                                  mousedown event; user->task message on this event would be: [<<ums>>,<<key>>,[42,<<number>>,<<number>>]] where <<number>>,<<number>> is the x,y of the mouse from the top-left of item 
    <<eventType>>       43                                                  mouseup event; user->task message on this event would be: [<<ums>>,<<key>>,[43,<<number>>,<<number>>]] where <<number>>,<<number>> is the x,y of the mouse from the top-left of item 
    <<eventType>>       44                                                  mousemove event; user->task message on this event would be: [<<ums>>,<<key>>,[44,<<number>>,<<number>>]] where <<number>>,<<number>> is the x,y of the mouse from the top-left of item 
    <<eventType>>       45                                                  mouseenter event; user->task message on this event would be: [<<ums>>,<<key>>,[45,<<number>>,<<number>>]] where <<number>>,<<number>> is the x,y of the mouse from the top-left of item 
    <<eventType>>       46                                                  mouseleave event; user->task message on this event would be: [<<ums>>,<<key>>,[46,<<number>>,<<number>>]] where <<number>>,<<number>> is the x,y of the mouse from the top-left of item 
    <<eventType>>       47                                                  mouseover event; user->task message on this event would be: [<<ums>>,<<key>>,[47,<<number>>,<<number>>]] where <<number>>,<<number>> is the x,y of the mouse from the top-left of item 
    <<eventType>>       48                                                  mouseout event; user->task message on this event would be: [<<ums>>,<<key>>,[48,<<number>>,<<number>>]] where <<number>>,<<number>> is the x,y of the mouse from the top-left of item 
    <<timeField>>       Y|M|D|d|h|m|s|.                                     the characters "YMDdhms." correspond to Year, Month, Day, day of week, hours, min, sec, and milliseconds
    <<color>>           ** see CSS color specification, e.g. http://www.w3schools.com/cssref/css_colors.asp **
    <<cssBackground>>   ** see CSS background specification, e.g. http://www.w3schools.com/cssref/css3_pr_background.asp **
    <<cssBorder>>       ** see CSS border style specification, e.g. http://www.w3schools.com/cssref/pr_border.asp **
    <<cssPadding>>      ** see CSS border style specification, e.g. http://www.w3schools.com/cssref/pr_padding.asp **
    <<cssFont>>         ** see CSS font specification, e.g. http://www.w3schools.com/cssref/pr_font_font.asp **
    <<strokeDash>>      ** see SVG stroke-dasharray specification, e.g. https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray **

